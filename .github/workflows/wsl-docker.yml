name: Build Ubuntu WSL Docker image

on:
  schedule:
    # update once a week
    - cron: "0 0 * * SUN"
  push:
    branches:
      - main
    paths:
      - .github/workflows/wsl-docker.yml
      - tasks/ci/wsl-docker/**
      - docker/wsl/**
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/wsl-docker.yml
      - tasks/ci/wsl-docker/**
      - docker/wsl/**
  workflow_dispatch:

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  build-wsl:
    name: Build WSL Docker Image
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read # for checkout
      packages: write # for GitHub Package Registry

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/wsl

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          sparse-checkout: |
            mise.toml
            tasks.toml
            tasks/
            docker/wsl/
          persist-credentials: false

      - name: Install mise
        uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2.4.4
        with:
          version: 2025.8.7
          cache: false
        env:
          # only install required tools
          MISE_ENABLE_TOOLS: jc
          GITHUB_TOKEN: ${{ github.token }}

      - name: Retrieve Ubuntu WSL image info
        id: image-info
        run: mise run ci:wsl-docker:image-info
        env:
          MISE_AUTO_INSTALL: false
          MISE_LOG_LEVEL: trace
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GITHUB_TOKEN: ${{ github.token }}

      - name: Download Ubuntu WSL image
        id: download
        if: github.event_name == 'pull_request' || steps.image-info.outputs.skip_build == 'false'
        run: curl --fail-with-body --location --output wsl-amd64.wsl "${IMAGE_URL}"
        env:
          IMAGE_URL: ${{ steps.image-info.outputs.image_url }}

      # cspell:ignore buildx
      - name: Setup Buildx
        if: steps.download.outcome != 'skipped'
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          cache-binary: false

      - name: Login to GitHub Container Registry
        id: login
        # create a new package if the package is not found in PR
        if: github.event_name != 'pull_request' || steps.image-info.outputs.latest_tag == ''
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push Docker image
        if: steps.download.outcome != 'skipped'
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./docker/wsl/Dockerfile
          push: ${{ steps.login.outcome != 'skipped' }}
          # avoid image without manifest created
          # ref: https://github.com/docker/build-push-action/issues/900
          provenance: false
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.image-info.outputs.new_tag }}
            ghcr.io/${{ env.IMAGE_NAME }}:latest
          no-cache: true

  actions-timeline:
    name: Generate Actions Timeline
    needs:
      - build-wsl
    if: ${{ !cancelled() }}

    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      actions: read # for actions-timeline

    steps:
      - name: actions-timeline
        # cspell:ignore kesin
        uses: Kesin11/actions-timeline@a7eaabf426cdae26c3582c3fa674b897170dec8f # v2.2.4
