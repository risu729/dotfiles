name: Build Ubuntu WSL Docker image

on:
  schedule:
    # update once a week
    - cron: "0 0 * * SUN"
  push:
    branches:
      - main
    paths:
      - .github/workflows/wsl-docker.yml
      - tasks/ci/wsl-docker/**
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/wsl-docker.yml
      - tasks/ci/wsl-docker/**
  workflow_dispatch:

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  build-wsl:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read # for checkout
      packages: write # for GitHub Package Registry

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/wsl

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: |
            mise.toml
            tasks.toml
            tasks/*
          sparse-checkout-cone-mode: false
          persist-credentials: false

      - name: Install mise
        uses: jdx/mise-action@c94f0bf9e520b150e34c017db785461f7e71c5fb # v2.2.2
        with:
          version: 2025.5.8
          cache: false
        env:
          # only install required tools
          MISE_ENABLE_TOOLS: jc
          GITHUB_TOKEN: ${{ github.token }}

      - name: Retrieve Ubuntu WSL image info
        id: image-info
        run: mise run ci:wsl-docker:image-info
        env:
          MISE_ENABLE_TOOLS: jc
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GITHUB_TOKEN: ${{ github.token }}

      - name: Download Ubuntu WSL image
        id: download
        if: ${{ github.event_name == 'pull_request' || steps.image-info.outputs.skip_build == 'false' }}
        run: curl --fail-with-body --location --output wsl-amd64.wsl "${IMAGE_URL}"
        env:
          IMAGE_URL: ${{ steps.image-info.outputs.image_url }}

      - name: Create Dockerfile
        if: ${{ steps.download.outcome != 'skipped' }}
        run: |
          cat <<EOF > Dockerfile
          FROM scratch
          ADD wsl-amd64.wsl /
          EOF

      - name: Login to GitHub Container Registry
        if: ${{ steps.download.outcome != 'skipped' }}
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # cspell:ignore buildx
      - name: Setup Buildx
        if: ${{ steps.download.outcome != 'skipped' }}
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          cache-binary: false

      - name: Build and push Docker image
        if: ${{ steps.download.outcome != 'skipped' }}
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: .
          # create a new package if the package is not found
          push: ${{ github.event_name != 'pull_request' || steps.image-info.outputs.latest_tag == 'none' }}
          # avoid image without manifest created
          # ref: https://github.com/docker/build-push-action/issues/900
          provenance: false
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.image-info.outputs.new_tag }}
            ghcr.io/${{ env.IMAGE_NAME }}:latest
          no-cache: true

  actions-timeline:
    needs:
      - build-wsl
    if: ${{ !cancelled() }}

    runs-on: ubuntu-24.04
    timeout-minutes: 5
    permissions:
      actions: read # for actions-timeline

    steps:
      - name: actions-timeline
        # cspell:ignore kesin
        uses: Kesin11/actions-timeline@427ee2cf860166e404d0d69b4f2b24012bb7af4f # v2.2.3
